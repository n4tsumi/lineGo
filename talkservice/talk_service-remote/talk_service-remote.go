// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"talkservice"
)

var _ = talkservice.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void tryFriendRequest(string midOrEMid, xc method, string friendRequestParams)")
	fmt.Fprintln(os.Stderr, "  void updateExtendedProfileAttribute(i32 reqSeq, ec attr, ExtendedProfile extendedProfile)")
	fmt.Fprintln(os.Stderr, "  void verifyAccountMigration(string migrationSessionId)")
	fmt.Fprintln(os.Stderr, "  void reportLocation(Geolocation location, qe trigger, ClientNetworkStatus networkStatus)")
	fmt.Fprintln(os.Stderr, "   getPaidCallBalanceList(string language)")
	fmt.Fprintln(os.Stderr, "  CreateChatResponse createChat(CreateChatRequest requests)")
	fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, MIDType type, string reference)")
	fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
	fmt.Fprintln(os.Stderr, "   getContacts( ids)")
	fmt.Fprintln(os.Stderr, "  GetFollowersResponse getFollowers(GetFollowersRequest getFollowersRequest)")
	fmt.Fprintln(os.Stderr, "   getLastE2EEPublicKeys(string chatMid)")
	fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
	fmt.Fprintln(os.Stderr, "  void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)")
	fmt.Fprintln(os.Stderr, "  void removeChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, i64 announcementSeq)")
	fmt.Fprintln(os.Stderr, "  void sendChatRemoved(i32 seq, string chatMid, string lastMessageId, i8 sessionId)")
	fmt.Fprintln(os.Stderr, "  IdentityCredentialResponse updatePassword(string authSessionId, IdentityCredentialRequest request)")
	fmt.Fprintln(os.Stderr, "  void unblockContact(i32 reqSeq, string id, string reference)")
	fmt.Fprintln(os.Stderr, "  void updateGroupPreferenceAttribute(i32 reqSeq, string groupMid,  updatedAttrs)")
	fmt.Fprintln(os.Stderr, "  UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential, string migrationPincodeSessionId)")
	fmt.Fprintln(os.Stderr, "  void requestCleanupUserProvidedData( dataTypes)")
	fmt.Fprintln(os.Stderr, "  BuddyStatusBar getBuddyStatusBarV2(GetBuddyStatusBarV2Request request)")
	fmt.Fprintln(os.Stderr, "  PaidCallHistoryResult getPaidCallHistory(i64 start, i32 size, string language)")
	fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
	fmt.Fprintln(os.Stderr, "  Group createGroupV2(i32 seq, string name,  contactIds)")
	fmt.Fprintln(os.Stderr, "   findAndAddContactsByPhone(i32 reqSeq,  phones, string reference)")
	fmt.Fprintln(os.Stderr, "   getAcceptedProximityMatches(string sessionId)")
	fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncementsBulk( chatRoomMids, SyncReason syncReason)")
	fmt.Fprintln(os.Stderr, "   getCountries(ib countryGroup)")
	fmt.Fprintln(os.Stderr, "  GetFollowingsResponse getFollowings(GetFollowingsRequest getFollowingsRequest)")
	fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
	fmt.Fprintln(os.Stderr, "  i64 getRingbackTone()")
	fmt.Fprintln(os.Stderr, "  RegisterWithPhoneNumberResult registerWithPhoneNumber(string sessionId, string migrationPincodeSessionId)")
	fmt.Fprintln(os.Stderr, "  void report(i64 syncOpRevision, di category, string report)")
	fmt.Fprintln(os.Stderr, "  void unblockRecommendation(i32 reqSeq, string id)")
	fmt.Fprintln(os.Stderr, "  void updateGroup(i32 reqSeq, Group group)")
	fmt.Fprintln(os.Stderr, "   findBuddyContactsByQuery(string language, string country, string query, i32 fromIndex, i32 count, a3 requestSource)")
	fmt.Fprintln(os.Stderr, "  PaidCallMetadataResult getPaidCallMetadata(string language)")
	fmt.Fprintln(os.Stderr, "  void blockRecommendation(i32 reqSeq, string id)")
	fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string searchId, string reference)")
	fmt.Fprintln(os.Stderr, "  GetAllChatMidsResponse getAllChatMids(GetAllChatMidsRequest request, SyncReason syncReason)")
	fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncements(string chatRoomMids)")
	fmt.Fprintln(os.Stderr, "  string getCountryWithRequestIp()")
	fmt.Fprintln(os.Stderr, "   getFriendRequests(wc direction, i64 lastSeenSeqId)")
	fmt.Fprintln(os.Stderr, "  Ringtone getRingtone()")
	fmt.Fprintln(os.Stderr, "  void updateProfile(i32 reqSeq, Profile profile)")
	fmt.Fprintln(os.Stderr, "  void notifySleep(i64 lastRev, i32 badge)")
	fmt.Fprintln(os.Stderr, "  string registerWithSnsIdAndIdentityCredential(vh snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo, string migrationPincodeSessionId)")
	fmt.Fprintln(os.Stderr, "  void removeFollower(RemoveFollowerRequest removeFollowerRequest)")
	fmt.Fprintln(os.Stderr, "  void requestAccountPasswordReset(Provider provider, string identifier, string locale)")
	fmt.Fprintln(os.Stderr, "  void sendEchoPush(string text)")
	fmt.Fprintln(os.Stderr, "  void unfollow(UnfollowRequest unfollowRequest)")
	fmt.Fprintln(os.Stderr, "  void inviteIntoGroupCall(string chatMid,  memberMids, ae mediaType)")
	fmt.Fprintln(os.Stderr, "  CancelChatInvitationResponse cancelChatInvitation(CancelChatInvitationRequest request)")
	fmt.Fprintln(os.Stderr, "  FindChatByTicketResponse findChatByTicket(FindChatByTicketRequest request)")
	fmt.Fprintln(os.Stderr, "   getAllContactIds(SyncReason syncReason)")
	fmt.Fprintln(os.Stderr, "   getChatRoomBGMs( chatRoomMids, SyncReason syncReason)")
	fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getE2EEGroupSharedKey(i32 keyVersion, string chatMid, i32 groupKeyId)")
	fmt.Fprintln(os.Stderr, "   getGroupIdsInvited(SyncReason syncReason)")
	fmt.Fprintln(os.Stderr, "  Profile getProfile(SyncReason syncReason)")
	fmt.Fprintln(os.Stderr, "  void notifyUpdated(i64 lastRev, DeviceInfo deviceInfo, string udidHash, string oldUdidHash)")
	fmt.Fprintln(os.Stderr, "  RegisterWithSnsIdResult registerWithSnsId(vh snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid, string migrationPincodeSessionId)")
	fmt.Fprintln(os.Stderr, "  void removeFriendRequest(wc direction, string midOrEMid)")
	fmt.Fprintln(os.Stderr, "  string openAuthSession(AuthSessionRequest request)")
	fmt.Fprintln(os.Stderr, "  string verifyQrcodeWithE2EE(string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, string encryptedKeyChain, string hashKeyChain)")
	fmt.Fprintln(os.Stderr, "  GetBalanceResponse getBalance(GetBalanceRequest request)")
	fmt.Fprintln(os.Stderr, "  string unregisterUserAndDevice()")
	fmt.Fprintln(os.Stderr, "  void updateNotificationToken(ye type)")
	fmt.Fprintln(os.Stderr, "  PhoneVerificationResult verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)")
	fmt.Fprintln(os.Stderr, "  void cancelGroupInvitation(i32 reqSeq, string groupId,  contactIds)")
	fmt.Fprintln(os.Stderr, "  Room createRoomV2(i32 reqSeq,  contactIds)")
	fmt.Fprintln(os.Stderr, "  Contact findContactByMetaTag(string searchId, string reference)")
	fmt.Fprintln(os.Stderr, "  GetChatsResponse getChats(GetChatsRequest request)")
	fmt.Fprintln(os.Stderr, "   getGroupIdsJoined(SyncReason syncReason)")
	fmt.Fprintln(os.Stderr, "   getRoomsV2( roomIds)")
	fmt.Fprintln(os.Stderr, "  ReissueChatTicketResponse reissueChatTicket(ReissueChatTicketRequest request)")
	fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
	fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
	fmt.Fprintln(os.Stderr, "  GroupCallRoute acquireGroupCallRoute(string chatMid, ae mediaType, bool isInitialHost,  capabilities)")
	fmt.Fprintln(os.Stderr, "  AcceptChatInvitationByTicketResponse acceptChatInvitationByTicket(AcceptChatInvitationByTicketRequest request)")
	fmt.Fprintln(os.Stderr, "  Contact findContactByUserTicket(string ticketIdWithTag)")
	fmt.Fprintln(os.Stderr, "   getE2EEPublicKey(string mid, i32 keyVersion, i32 keyId)")
	fmt.Fprintln(os.Stderr, "  string registerDeviceWithIdentityCredential(string sessionId, Provider provider, string identifier, string verifier, string migrationPincodeSessionId)")
	fmt.Fprintln(os.Stderr, "  string reissueGroupTicket(string groupMid)")
	fmt.Fprintln(os.Stderr, "  void updateProfileAttributes(i32 reqSeq, UpdateProfileAttributesRequest request)")
	fmt.Fprintln(os.Stderr, "  string verifyQrcode(string verifier, string pinCode)")
	fmt.Fprintln(os.Stderr, "  AcceptChatInvitationResponse acceptChatInvitation(AcceptChatInvitationRequest request)")
	fmt.Fprintln(os.Stderr, "  string decryptFollowEMid(string eMid)")
	fmt.Fprintln(os.Stderr, "  Contact findContactByUserid(string searchId)")
	fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
	fmt.Fprintln(os.Stderr, "  InviteIntoChatResponse inviteIntoChat(InviteIntoChatRequest request)")
	fmt.Fprintln(os.Stderr, "  void acceptGroupInvitationByTicket(i32 reqSeq, string groupMid, string ticketId)")
	fmt.Fprintln(os.Stderr, "  DeleteOtherFromChatResponse deleteOtherFromChat(DeleteOtherFromChatRequest request)")
	fmt.Fprintln(os.Stderr, "   findContactsByPhone( phones)")
	fmt.Fprintln(os.Stderr, "   getGroupsV2( groupId)")
	fmt.Fprintln(os.Stderr, "  Group getGroup(string groupId)")
	fmt.Fprintln(os.Stderr, "  Group getCompactGroup(string groupId)")
	fmt.Fprintln(os.Stderr, "  Group getGroupWithoutMembers(string groupId)")
	fmt.Fprintln(os.Stderr, "  void inviteIntoGroup(i32 reqSeq, string groupId,  contactIds)")
	fmt.Fprintln(os.Stderr, "  void acceptGroupInvitation(i32 reqSeq, string groupId)")
	fmt.Fprintln(os.Stderr, "  DeleteSelfFromChatResponse deleteSelfFromChat(DeleteSelfFromChatRequest request)")
	fmt.Fprintln(os.Stderr, "   getBlockedContactIds(SyncReason syncReason)")
	fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes2( attributesToRetrieve)")
	fmt.Fprintln(os.Stderr, "  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)")
	fmt.Fprintln(os.Stderr, "  RejectChatInvitationResponse rejectChatInvitation(RejectChatInvitationRequest request)")
	fmt.Fprintln(os.Stderr, "  ChatRoomBGM updateChatRoomBGM(i32 reqSeq, string chatRoomMid, string chatRoomBGMInfo)")
	fmt.Fprintln(os.Stderr, "  Group findGroupByTicket(string ticketId)")
	fmt.Fprintln(os.Stderr, "  FriendRequestsInfo getRecentFriendRequests(SyncReason syncReason)")
	fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes(i32 attrBitset)")
	fmt.Fprintln(os.Stderr, "  void rejectGroupInvitation(i32 reqSeq, string groupId)")
	fmt.Fprintln(os.Stderr, "  UpdateChatResponse updateChat(UpdateChatRequest request)")
	fmt.Fprintln(os.Stderr, "   updateSettingsAttributes2(i32 reqSeq,  attributesToUpdate, Settings settings)")
	fmt.Fprintln(os.Stderr, "  Settings getSettings(SyncReason syncReason)")
	fmt.Fprintln(os.Stderr, "  void noop()")
	fmt.Fprintln(os.Stderr, "  void removeAllMessages(i32 seq, string lastMessageId)")
	fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, eb flag, string value)")
	fmt.Fprintln(os.Stderr, "  GroupCall getGroupCall(string chatMid)")
	fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
	fmt.Fprintln(os.Stderr, "   fetchOperations(i64 localRev, i32 count)")
	fmt.Fprintln(os.Stderr, "  void kickoutFromGroup(i32 reqSeq, string groupId,  contactIds)")
	fmt.Fprintln(os.Stderr, "  string acquireEncryptedAccessToken(nc featureType)")
	fmt.Fprintln(os.Stderr, "  ChatRoomAnnouncement createChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, y9 type, ChatRoomAnnouncementContents contents)")
	fmt.Fprintln(os.Stderr, "  Contact findAndAddContactByMetaTag(i32 reqSeq, string searchId, string reference)")
	fmt.Fprintln(os.Stderr, "  void follow(FollowRequest followRequest)")
	fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
	fmt.Fprintln(os.Stderr, "  void leaveGroup(i32 reqSeq, string groupId)")
	fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string chatMid, string lastMessageId, i8 sessionId)")
	fmt.Fprintln(os.Stderr, "  IdentityCredentialResponse updateIdentifier(string authSessionId, IdentityCredentialRequest request)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := talkservice.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "tryFriendRequest":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "TryFriendRequest requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := talkservice.Xc(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.TryFriendRequest(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "updateExtendedProfileAttribute":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UpdateExtendedProfileAttribute requires 3 args")
			flag.Usage()
		}
		tmp0, err362 := (strconv.Atoi(flag.Arg(1)))
		if err362 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := talkservice.Ec(tmp1)
		value1 := argvalue1
		arg363 := flag.Arg(3)
		mbTrans364 := thrift.NewTMemoryBufferLen(len(arg363))
		defer mbTrans364.Close()
		_, err365 := mbTrans364.WriteString(arg363)
		if err365 != nil {
			Usage()
			return
		}
		factory366 := thrift.NewTJSONProtocolFactory()
		jsProt367 := factory366.GetProtocol(mbTrans364)
		argvalue2 := talkservice.NewExtendedProfile()
		err368 := argvalue2.Read(jsProt367)
		if err368 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.UpdateExtendedProfileAttribute(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "verifyAccountMigration":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "VerifyAccountMigration requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.VerifyAccountMigration(context.Background(), value0))
		fmt.Print("\n")
		break
	case "reportLocation":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ReportLocation requires 3 args")
			flag.Usage()
		}
		arg370 := flag.Arg(1)
		mbTrans371 := thrift.NewTMemoryBufferLen(len(arg370))
		defer mbTrans371.Close()
		_, err372 := mbTrans371.WriteString(arg370)
		if err372 != nil {
			Usage()
			return
		}
		factory373 := thrift.NewTJSONProtocolFactory()
		jsProt374 := factory373.GetProtocol(mbTrans371)
		argvalue0 := talkservice.NewGeolocation()
		err375 := argvalue0.Read(jsProt374)
		if err375 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := talkservice.Qe(tmp1)
		value1 := argvalue1
		arg376 := flag.Arg(3)
		mbTrans377 := thrift.NewTMemoryBufferLen(len(arg376))
		defer mbTrans377.Close()
		_, err378 := mbTrans377.WriteString(arg376)
		if err378 != nil {
			Usage()
			return
		}
		factory379 := thrift.NewTJSONProtocolFactory()
		jsProt380 := factory379.GetProtocol(mbTrans377)
		argvalue2 := talkservice.NewClientNetworkStatus()
		err381 := argvalue2.Read(jsProt380)
		if err381 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.ReportLocation(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "getPaidCallBalanceList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPaidCallBalanceList requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetPaidCallBalanceList(context.Background(), value0))
		fmt.Print("\n")
		break
	case "createChat":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateChat requires 1 args")
			flag.Usage()
		}
		arg383 := flag.Arg(1)
		mbTrans384 := thrift.NewTMemoryBufferLen(len(arg383))
		defer mbTrans384.Close()
		_, err385 := mbTrans384.WriteString(arg383)
		if err385 != nil {
			Usage()
			return
		}
		factory386 := thrift.NewTJSONProtocolFactory()
		jsProt387 := factory386.GetProtocol(mbTrans384)
		argvalue0 := talkservice.NewCreateChatRequest()
		err388 := argvalue0.Read(jsProt387)
		if err388 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateChat(context.Background(), value0))
		fmt.Print("\n")
		break
	case "findAndAddContactsByMid":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
			flag.Usage()
		}
		tmp0, err389 := (strconv.Atoi(flag.Arg(1)))
		if err389 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := talkservice.MIDType(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "generateUserTicket":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
			flag.Usage()
		}
		argvalue0, err392 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err392 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err393 := (strconv.Atoi(flag.Arg(2)))
		if err393 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getContacts":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
			flag.Usage()
		}
		arg394 := flag.Arg(1)
		mbTrans395 := thrift.NewTMemoryBufferLen(len(arg394))
		defer mbTrans395.Close()
		_, err396 := mbTrans395.WriteString(arg394)
		if err396 != nil {
			Usage()
			return
		}
		factory397 := thrift.NewTJSONProtocolFactory()
		jsProt398 := factory397.GetProtocol(mbTrans395)
		containerStruct0 := talkservice.NewTalkServiceGetContactsArgs()
		err399 := containerStruct0.ReadField1(jsProt398)
		if err399 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Ids
		value0 := argvalue0
		fmt.Print(client.GetContacts(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getFollowers":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFollowers requires 1 args")
			flag.Usage()
		}
		arg400 := flag.Arg(1)
		mbTrans401 := thrift.NewTMemoryBufferLen(len(arg400))
		defer mbTrans401.Close()
		_, err402 := mbTrans401.WriteString(arg400)
		if err402 != nil {
			Usage()
			return
		}
		factory403 := thrift.NewTJSONProtocolFactory()
		jsProt404 := factory403.GetProtocol(mbTrans401)
		argvalue0 := talkservice.NewGetFollowersRequest()
		err405 := argvalue0.Read(jsProt404)
		if err405 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFollowers(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getLastE2EEPublicKeys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetLastE2EEPublicKeys requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetLastE2EEPublicKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "leaveRoom":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
			flag.Usage()
		}
		tmp0, err407 := (strconv.Atoi(flag.Arg(1)))
		if err407 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.LeaveRoom(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "notifyRegistrationComplete":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "NotifyRegistrationComplete requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.NotifyRegistrationComplete(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "removeChatRoomAnnouncement":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RemoveChatRoomAnnouncement requires 3 args")
			flag.Usage()
		}
		tmp0, err411 := (strconv.Atoi(flag.Arg(1)))
		if err411 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err413 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err413 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.RemoveChatRoomAnnouncement(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "sendChatRemoved":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SendChatRemoved requires 4 args")
			flag.Usage()
		}
		tmp0, err414 := (strconv.Atoi(flag.Arg(1)))
		if err414 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err417 := (strconv.Atoi(flag.Arg(4)))
		if err417 != nil {
			Usage()
			return
		}
		argvalue3 := int8(tmp3)
		value3 := argvalue3
		fmt.Print(client.SendChatRemoved(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "updatePassword":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdatePassword requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg419 := flag.Arg(2)
		mbTrans420 := thrift.NewTMemoryBufferLen(len(arg419))
		defer mbTrans420.Close()
		_, err421 := mbTrans420.WriteString(arg419)
		if err421 != nil {
			Usage()
			return
		}
		factory422 := thrift.NewTJSONProtocolFactory()
		jsProt423 := factory422.GetProtocol(mbTrans420)
		argvalue1 := talkservice.NewIdentityCredentialRequest()
		err424 := argvalue1.Read(jsProt423)
		if err424 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdatePassword(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "unblockContact":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UnblockContact requires 3 args")
			flag.Usage()
		}
		tmp0, err425 := (strconv.Atoi(flag.Arg(1)))
		if err425 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UnblockContact(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "updateGroupPreferenceAttribute":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UpdateGroupPreferenceAttribute requires 3 args")
			flag.Usage()
		}
		tmp0, err428 := (strconv.Atoi(flag.Arg(1)))
		if err428 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg430 := flag.Arg(3)
		mbTrans431 := thrift.NewTMemoryBufferLen(len(arg430))
		defer mbTrans431.Close()
		_, err432 := mbTrans431.WriteString(arg430)
		if err432 != nil {
			Usage()
			return
		}
		factory433 := thrift.NewTJSONProtocolFactory()
		jsProt434 := factory433.GetProtocol(mbTrans431)
		containerStruct2 := talkservice.NewTalkServiceUpdateGroupPreferenceAttributeArgs()
		err435 := containerStruct2.ReadField3(jsProt434)
		if err435 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.UpdatedAttrs
		value2 := argvalue2
		fmt.Print(client.UpdateGroupPreferenceAttribute(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "verifyIdentityCredentialWithResult":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "VerifyIdentityCredentialWithResult_ requires 2 args")
			flag.Usage()
		}
		arg436 := flag.Arg(1)
		mbTrans437 := thrift.NewTMemoryBufferLen(len(arg436))
		defer mbTrans437.Close()
		_, err438 := mbTrans437.WriteString(arg436)
		if err438 != nil {
			Usage()
			return
		}
		factory439 := thrift.NewTJSONProtocolFactory()
		jsProt440 := factory439.GetProtocol(mbTrans437)
		argvalue0 := talkservice.NewIdentityCredential()
		err441 := argvalue0.Read(jsProt440)
		if err441 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.VerifyIdentityCredentialWithResult_(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "requestCleanupUserProvidedData":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RequestCleanupUserProvidedData requires 1 args")
			flag.Usage()
		}
		arg443 := flag.Arg(1)
		mbTrans444 := thrift.NewTMemoryBufferLen(len(arg443))
		defer mbTrans444.Close()
		_, err445 := mbTrans444.WriteString(arg443)
		if err445 != nil {
			Usage()
			return
		}
		factory446 := thrift.NewTJSONProtocolFactory()
		jsProt447 := factory446.GetProtocol(mbTrans444)
		containerStruct0 := talkservice.NewTalkServiceRequestCleanupUserProvidedDataArgs()
		err448 := containerStruct0.ReadField1(jsProt447)
		if err448 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.DataTypes
		value0 := argvalue0
		fmt.Print(client.RequestCleanupUserProvidedData(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getBuddyStatusBarV2":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetBuddyStatusBarV2 requires 1 args")
			flag.Usage()
		}
		arg449 := flag.Arg(1)
		mbTrans450 := thrift.NewTMemoryBufferLen(len(arg449))
		defer mbTrans450.Close()
		_, err451 := mbTrans450.WriteString(arg449)
		if err451 != nil {
			Usage()
			return
		}
		factory452 := thrift.NewTJSONProtocolFactory()
		jsProt453 := factory452.GetProtocol(mbTrans450)
		argvalue0 := talkservice.NewGetBuddyStatusBarV2Request()
		err454 := argvalue0.Read(jsProt453)
		if err454 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetBuddyStatusBarV2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getPaidCallHistory":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPaidCallHistory requires 3 args")
			flag.Usage()
		}
		argvalue0, err455 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err455 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err456 := (strconv.Atoi(flag.Arg(2)))
		if err456 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetPaidCallHistory(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "blockContact":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
			flag.Usage()
		}
		tmp0, err458 := (strconv.Atoi(flag.Arg(1)))
		if err458 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.BlockContact(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "createGroupV2":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CreateGroupV2 requires 3 args")
			flag.Usage()
		}
		tmp0, err460 := (strconv.Atoi(flag.Arg(1)))
		if err460 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg462 := flag.Arg(3)
		mbTrans463 := thrift.NewTMemoryBufferLen(len(arg462))
		defer mbTrans463.Close()
		_, err464 := mbTrans463.WriteString(arg462)
		if err464 != nil {
			Usage()
			return
		}
		factory465 := thrift.NewTJSONProtocolFactory()
		jsProt466 := factory465.GetProtocol(mbTrans463)
		containerStruct2 := talkservice.NewTalkServiceCreateGroupV2Args()
		err467 := containerStruct2.ReadField3(jsProt466)
		if err467 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ContactIds
		value2 := argvalue2
		fmt.Print(client.CreateGroupV2(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "findAndAddContactsByPhone":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "FindAndAddContactsByPhone requires 3 args")
			flag.Usage()
		}
		tmp0, err468 := (strconv.Atoi(flag.Arg(1)))
		if err468 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg469 := flag.Arg(2)
		mbTrans470 := thrift.NewTMemoryBufferLen(len(arg469))
		defer mbTrans470.Close()
		_, err471 := mbTrans470.WriteString(arg469)
		if err471 != nil {
			Usage()
			return
		}
		factory472 := thrift.NewTJSONProtocolFactory()
		jsProt473 := factory472.GetProtocol(mbTrans470)
		containerStruct1 := talkservice.NewTalkServiceFindAndAddContactsByPhoneArgs()
		err474 := containerStruct1.ReadField2(jsProt473)
		if err474 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Phones
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.FindAndAddContactsByPhone(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "getAcceptedProximityMatches":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAcceptedProximityMatches requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAcceptedProximityMatches(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getChatRoomAnnouncementsBulk":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncementsBulk requires 2 args")
			flag.Usage()
		}
		arg477 := flag.Arg(1)
		mbTrans478 := thrift.NewTMemoryBufferLen(len(arg477))
		defer mbTrans478.Close()
		_, err479 := mbTrans478.WriteString(arg477)
		if err479 != nil {
			Usage()
			return
		}
		factory480 := thrift.NewTJSONProtocolFactory()
		jsProt481 := factory480.GetProtocol(mbTrans478)
		containerStruct0 := talkservice.NewTalkServiceGetChatRoomAnnouncementsBulkArgs()
		err482 := containerStruct0.ReadField1(jsProt481)
		if err482 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.ChatRoomMids
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := talkservice.SyncReason(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetChatRoomAnnouncementsBulk(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getCountries":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCountries requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.Ib(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetCountries(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getFollowings":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFollowings requires 1 args")
			flag.Usage()
		}
		arg483 := flag.Arg(1)
		mbTrans484 := thrift.NewTMemoryBufferLen(len(arg483))
		defer mbTrans484.Close()
		_, err485 := mbTrans484.WriteString(arg483)
		if err485 != nil {
			Usage()
			return
		}
		factory486 := thrift.NewTJSONProtocolFactory()
		jsProt487 := factory486.GetProtocol(mbTrans484)
		argvalue0 := talkservice.NewGetFollowingsRequest()
		err488 := argvalue0.Read(jsProt487)
		if err488 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFollowings(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getLastOpRevision":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetLastOpRevision(context.Background()))
		fmt.Print("\n")
		break
	case "getRingbackTone":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRingbackTone requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRingbackTone(context.Background()))
		fmt.Print("\n")
		break
	case "registerWithPhoneNumber":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RegisterWithPhoneNumber requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RegisterWithPhoneNumber(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "report":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "Report requires 3 args")
			flag.Usage()
		}
		argvalue0, err491 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err491 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := talkservice.Di(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.Report(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "unblockRecommendation":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UnblockRecommendation requires 2 args")
			flag.Usage()
		}
		tmp0, err493 := (strconv.Atoi(flag.Arg(1)))
		if err493 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UnblockRecommendation(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "updateGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateGroup requires 2 args")
			flag.Usage()
		}
		tmp0, err495 := (strconv.Atoi(flag.Arg(1)))
		if err495 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg496 := flag.Arg(2)
		mbTrans497 := thrift.NewTMemoryBufferLen(len(arg496))
		defer mbTrans497.Close()
		_, err498 := mbTrans497.WriteString(arg496)
		if err498 != nil {
			Usage()
			return
		}
		factory499 := thrift.NewTJSONProtocolFactory()
		jsProt500 := factory499.GetProtocol(mbTrans497)
		argvalue1 := talkservice.NewGroup()
		err501 := argvalue1.Read(jsProt500)
		if err501 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateGroup(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "findBuddyContactsByQuery":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "FindBuddyContactsByQuery requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err505 := (strconv.Atoi(flag.Arg(4)))
		if err505 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		tmp4, err506 := (strconv.Atoi(flag.Arg(5)))
		if err506 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		tmp5, err := (strconv.Atoi(flag.Arg(6)))
		if err != nil {
			Usage()
			return
		}
		argvalue5 := talkservice.A3(tmp5)
		value5 := argvalue5
		fmt.Print(client.FindBuddyContactsByQuery(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getPaidCallMetadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPaidCallMetadata requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetPaidCallMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "blockRecommendation":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "BlockRecommendation requires 2 args")
			flag.Usage()
		}
		tmp0, err508 := (strconv.Atoi(flag.Arg(1)))
		if err508 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.BlockRecommendation(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "findAndAddContactsByUserid":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 3 args")
			flag.Usage()
		}
		tmp0, err510 := (strconv.Atoi(flag.Arg(1)))
		if err510 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.FindAndAddContactsByUserid(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "getAllChatMids":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetAllChatMids requires 2 args")
			flag.Usage()
		}
		arg513 := flag.Arg(1)
		mbTrans514 := thrift.NewTMemoryBufferLen(len(arg513))
		defer mbTrans514.Close()
		_, err515 := mbTrans514.WriteString(arg513)
		if err515 != nil {
			Usage()
			return
		}
		factory516 := thrift.NewTJSONProtocolFactory()
		jsProt517 := factory516.GetProtocol(mbTrans514)
		argvalue0 := talkservice.NewGetAllChatMidsRequest()
		err518 := argvalue0.Read(jsProt517)
		if err518 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := talkservice.SyncReason(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetAllChatMids(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getChatRoomAnnouncements":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncements requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetChatRoomAnnouncements(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getCountryWithRequestIp":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCountryWithRequestIp requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCountryWithRequestIp(context.Background()))
		fmt.Print("\n")
		break
	case "getFriendRequests":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFriendRequests requires 2 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.Wc(tmp0)
		value0 := argvalue0
		argvalue1, err520 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err520 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.GetFriendRequests(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getRingtone":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRingtone requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRingtone(context.Background()))
		fmt.Print("\n")
		break
	case "updateProfile":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateProfile requires 2 args")
			flag.Usage()
		}
		tmp0, err521 := (strconv.Atoi(flag.Arg(1)))
		if err521 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg522 := flag.Arg(2)
		mbTrans523 := thrift.NewTMemoryBufferLen(len(arg522))
		defer mbTrans523.Close()
		_, err524 := mbTrans523.WriteString(arg522)
		if err524 != nil {
			Usage()
			return
		}
		factory525 := thrift.NewTJSONProtocolFactory()
		jsProt526 := factory525.GetProtocol(mbTrans523)
		argvalue1 := talkservice.NewProfile()
		err527 := argvalue1.Read(jsProt526)
		if err527 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateProfile(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "notifySleep":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "NotifySleep requires 2 args")
			flag.Usage()
		}
		argvalue0, err528 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err528 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err529 := (strconv.Atoi(flag.Arg(2)))
		if err529 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.NotifySleep(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "registerWithSnsIdAndIdentityCredential":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "RegisterWithSnsIdAndIdentityCredential requires 7 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.Vh(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg531 := flag.Arg(3)
		mbTrans532 := thrift.NewTMemoryBufferLen(len(arg531))
		defer mbTrans532.Close()
		_, err533 := mbTrans532.WriteString(arg531)
		if err533 != nil {
			Usage()
			return
		}
		factory534 := thrift.NewTJSONProtocolFactory()
		jsProt535 := factory534.GetProtocol(mbTrans532)
		argvalue2 := talkservice.NewIdentityCredential()
		err536 := argvalue2.Read(jsProt535)
		if err536 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		arg539 := flag.Arg(6)
		mbTrans540 := thrift.NewTMemoryBufferLen(len(arg539))
		defer mbTrans540.Close()
		_, err541 := mbTrans540.WriteString(arg539)
		if err541 != nil {
			Usage()
			return
		}
		factory542 := thrift.NewTJSONProtocolFactory()
		jsProt543 := factory542.GetProtocol(mbTrans540)
		argvalue5 := talkservice.NewDeviceInfo()
		err544 := argvalue5.Read(jsProt543)
		if err544 != nil {
			Usage()
			return
		}
		value5 := argvalue5
		argvalue6 := flag.Arg(7)
		value6 := argvalue6
		fmt.Print(client.RegisterWithSnsIdAndIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "removeFollower":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveFollower requires 1 args")
			flag.Usage()
		}
		arg546 := flag.Arg(1)
		mbTrans547 := thrift.NewTMemoryBufferLen(len(arg546))
		defer mbTrans547.Close()
		_, err548 := mbTrans547.WriteString(arg546)
		if err548 != nil {
			Usage()
			return
		}
		factory549 := thrift.NewTJSONProtocolFactory()
		jsProt550 := factory549.GetProtocol(mbTrans547)
		argvalue0 := talkservice.NewRemoveFollowerRequest()
		err551 := argvalue0.Read(jsProt550)
		if err551 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RemoveFollower(context.Background(), value0))
		fmt.Print("\n")
		break
	case "requestAccountPasswordReset":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RequestAccountPasswordReset requires 3 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.Provider(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.RequestAccountPasswordReset(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "sendEchoPush":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SendEchoPush requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.SendEchoPush(context.Background(), value0))
		fmt.Print("\n")
		break
	case "unfollow":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Unfollow requires 1 args")
			flag.Usage()
		}
		arg555 := flag.Arg(1)
		mbTrans556 := thrift.NewTMemoryBufferLen(len(arg555))
		defer mbTrans556.Close()
		_, err557 := mbTrans556.WriteString(arg555)
		if err557 != nil {
			Usage()
			return
		}
		factory558 := thrift.NewTJSONProtocolFactory()
		jsProt559 := factory558.GetProtocol(mbTrans556)
		argvalue0 := talkservice.NewUnfollowRequest()
		err560 := argvalue0.Read(jsProt559)
		if err560 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Unfollow(context.Background(), value0))
		fmt.Print("\n")
		break
	case "inviteIntoGroupCall":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "InviteIntoGroupCall requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg562 := flag.Arg(2)
		mbTrans563 := thrift.NewTMemoryBufferLen(len(arg562))
		defer mbTrans563.Close()
		_, err564 := mbTrans563.WriteString(arg562)
		if err564 != nil {
			Usage()
			return
		}
		factory565 := thrift.NewTJSONProtocolFactory()
		jsProt566 := factory565.GetProtocol(mbTrans563)
		containerStruct1 := talkservice.NewTalkServiceInviteIntoGroupCallArgs()
		err567 := containerStruct1.ReadField2(jsProt566)
		if err567 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.MemberMids
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := talkservice.Ae(tmp2)
		value2 := argvalue2
		fmt.Print(client.InviteIntoGroupCall(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "cancelChatInvitation":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelChatInvitation requires 1 args")
			flag.Usage()
		}
		arg568 := flag.Arg(1)
		mbTrans569 := thrift.NewTMemoryBufferLen(len(arg568))
		defer mbTrans569.Close()
		_, err570 := mbTrans569.WriteString(arg568)
		if err570 != nil {
			Usage()
			return
		}
		factory571 := thrift.NewTJSONProtocolFactory()
		jsProt572 := factory571.GetProtocol(mbTrans569)
		argvalue0 := talkservice.NewCancelChatInvitationRequest()
		err573 := argvalue0.Read(jsProt572)
		if err573 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CancelChatInvitation(context.Background(), value0))
		fmt.Print("\n")
		break
	case "findChatByTicket":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindChatByTicket requires 1 args")
			flag.Usage()
		}
		arg574 := flag.Arg(1)
		mbTrans575 := thrift.NewTMemoryBufferLen(len(arg574))
		defer mbTrans575.Close()
		_, err576 := mbTrans575.WriteString(arg574)
		if err576 != nil {
			Usage()
			return
		}
		factory577 := thrift.NewTJSONProtocolFactory()
		jsProt578 := factory577.GetProtocol(mbTrans575)
		argvalue0 := talkservice.NewFindChatByTicketRequest()
		err579 := argvalue0.Read(jsProt578)
		if err579 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.FindChatByTicket(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getAllContactIds":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllContactIds requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.SyncReason(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetAllContactIds(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getChatRoomBGMs":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetChatRoomBGMs requires 2 args")
			flag.Usage()
		}
		arg580 := flag.Arg(1)
		mbTrans581 := thrift.NewTMemoryBufferLen(len(arg580))
		defer mbTrans581.Close()
		_, err582 := mbTrans581.WriteString(arg580)
		if err582 != nil {
			Usage()
			return
		}
		factory583 := thrift.NewTJSONProtocolFactory()
		jsProt584 := factory583.GetProtocol(mbTrans581)
		containerStruct0 := talkservice.NewTalkServiceGetChatRoomBGMsArgs()
		err585 := containerStruct0.ReadField1(jsProt584)
		if err585 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.ChatRoomMids
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := talkservice.SyncReason(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetChatRoomBGMs(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getE2EEGroupSharedKey":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetE2EEGroupSharedKey requires 3 args")
			flag.Usage()
		}
		tmp0, err586 := (strconv.Atoi(flag.Arg(1)))
		if err586 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err588 := (strconv.Atoi(flag.Arg(3)))
		if err588 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetE2EEGroupSharedKey(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "getGroupIdsInvited":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetGroupIdsInvited requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.SyncReason(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetGroupIdsInvited(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getProfile":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetProfile requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.SyncReason(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetProfile(context.Background(), value0))
		fmt.Print("\n")
		break
	case "notifyUpdated":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "NotifyUpdated requires 4 args")
			flag.Usage()
		}
		argvalue0, err589 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err589 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg590 := flag.Arg(2)
		mbTrans591 := thrift.NewTMemoryBufferLen(len(arg590))
		defer mbTrans591.Close()
		_, err592 := mbTrans591.WriteString(arg590)
		if err592 != nil {
			Usage()
			return
		}
		factory593 := thrift.NewTJSONProtocolFactory()
		jsProt594 := factory593.GetProtocol(mbTrans591)
		argvalue1 := talkservice.NewDeviceInfo()
		err595 := argvalue1.Read(jsProt594)
		if err595 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.NotifyUpdated(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "registerWithSnsId":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "RegisterWithSnsId requires 7 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.Vh(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg601 := flag.Arg(5)
		mbTrans602 := thrift.NewTMemoryBufferLen(len(arg601))
		defer mbTrans602.Close()
		_, err603 := mbTrans602.WriteString(arg601)
		if err603 != nil {
			Usage()
			return
		}
		factory604 := thrift.NewTJSONProtocolFactory()
		jsProt605 := factory604.GetProtocol(mbTrans602)
		argvalue4 := talkservice.NewDeviceInfo()
		err606 := argvalue4.Read(jsProt605)
		if err606 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		argvalue6 := flag.Arg(7)
		value6 := argvalue6
		fmt.Print(client.RegisterWithSnsId(context.Background(), value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "removeFriendRequest":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RemoveFriendRequest requires 2 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.Wc(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RemoveFriendRequest(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "openAuthSession":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OpenAuthSession requires 1 args")
			flag.Usage()
		}
		arg610 := flag.Arg(1)
		mbTrans611 := thrift.NewTMemoryBufferLen(len(arg610))
		defer mbTrans611.Close()
		_, err612 := mbTrans611.WriteString(arg610)
		if err612 != nil {
			Usage()
			return
		}
		factory613 := thrift.NewTJSONProtocolFactory()
		jsProt614 := factory613.GetProtocol(mbTrans611)
		argvalue0 := talkservice.NewAuthSessionRequest()
		err615 := argvalue0.Read(jsProt614)
		if err615 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OpenAuthSession(context.Background(), value0))
		fmt.Print("\n")
		break
	case "verifyQrcodeWithE2EE":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "VerifyQrcodeWithE2EE requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := talkservice.ErrorCode(tmp2)
		value2 := argvalue2
		arg618 := flag.Arg(4)
		mbTrans619 := thrift.NewTMemoryBufferLen(len(arg618))
		defer mbTrans619.Close()
		_, err620 := mbTrans619.WriteString(arg618)
		if err620 != nil {
			Usage()
			return
		}
		factory621 := thrift.NewTJSONProtocolFactory()
		jsProt622 := factory621.GetProtocol(mbTrans619)
		argvalue3 := talkservice.NewE2EEPublicKey()
		err623 := argvalue3.Read(jsProt622)
		if err623 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		argvalue4 := []byte(flag.Arg(5))
		value4 := argvalue4
		argvalue5 := []byte(flag.Arg(6))
		value5 := argvalue5
		fmt.Print(client.VerifyQrcodeWithE2EE(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getBalance":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetBalance requires 1 args")
			flag.Usage()
		}
		arg626 := flag.Arg(1)
		mbTrans627 := thrift.NewTMemoryBufferLen(len(arg626))
		defer mbTrans627.Close()
		_, err628 := mbTrans627.WriteString(arg626)
		if err628 != nil {
			Usage()
			return
		}
		factory629 := thrift.NewTJSONProtocolFactory()
		jsProt630 := factory629.GetProtocol(mbTrans627)
		argvalue0 := talkservice.NewGetBalanceRequest()
		err631 := argvalue0.Read(jsProt630)
		if err631 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetBalance(context.Background(), value0))
		fmt.Print("\n")
		break
	case "unregisterUserAndDevice":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "UnregisterUserAndDevice requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.UnregisterUserAndDevice(context.Background()))
		fmt.Print("\n")
		break
	case "updateNotificationToken":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.Ye(tmp0)
		value0 := argvalue0
		fmt.Print(client.UpdateNotificationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "verifyPhoneNumber":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "VerifyPhoneNumber requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.VerifyPhoneNumber(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "cancelGroupInvitation":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CancelGroupInvitation requires 3 args")
			flag.Usage()
		}
		tmp0, err637 := (strconv.Atoi(flag.Arg(1)))
		if err637 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg639 := flag.Arg(3)
		mbTrans640 := thrift.NewTMemoryBufferLen(len(arg639))
		defer mbTrans640.Close()
		_, err641 := mbTrans640.WriteString(arg639)
		if err641 != nil {
			Usage()
			return
		}
		factory642 := thrift.NewTJSONProtocolFactory()
		jsProt643 := factory642.GetProtocol(mbTrans640)
		containerStruct2 := talkservice.NewTalkServiceCancelGroupInvitationArgs()
		err644 := containerStruct2.ReadField3(jsProt643)
		if err644 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ContactIds
		value2 := argvalue2
		fmt.Print(client.CancelGroupInvitation(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "createRoomV2":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateRoomV2 requires 2 args")
			flag.Usage()
		}
		tmp0, err645 := (strconv.Atoi(flag.Arg(1)))
		if err645 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg646 := flag.Arg(2)
		mbTrans647 := thrift.NewTMemoryBufferLen(len(arg646))
		defer mbTrans647.Close()
		_, err648 := mbTrans647.WriteString(arg646)
		if err648 != nil {
			Usage()
			return
		}
		factory649 := thrift.NewTJSONProtocolFactory()
		jsProt650 := factory649.GetProtocol(mbTrans647)
		containerStruct1 := talkservice.NewTalkServiceCreateRoomV2Args()
		err651 := containerStruct1.ReadField2(jsProt650)
		if err651 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.ContactIds
		value1 := argvalue1
		fmt.Print(client.CreateRoomV2(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "findContactByMetaTag":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FindContactByMetaTag requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.FindContactByMetaTag(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getChats":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetChats requires 1 args")
			flag.Usage()
		}
		arg654 := flag.Arg(1)
		mbTrans655 := thrift.NewTMemoryBufferLen(len(arg654))
		defer mbTrans655.Close()
		_, err656 := mbTrans655.WriteString(arg654)
		if err656 != nil {
			Usage()
			return
		}
		factory657 := thrift.NewTJSONProtocolFactory()
		jsProt658 := factory657.GetProtocol(mbTrans655)
		argvalue0 := talkservice.NewGetChatsRequest()
		err659 := argvalue0.Read(jsProt658)
		if err659 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetChats(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getGroupIdsJoined":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetGroupIdsJoined requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.SyncReason(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetGroupIdsJoined(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getRoomsV2":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRoomsV2 requires 1 args")
			flag.Usage()
		}
		arg660 := flag.Arg(1)
		mbTrans661 := thrift.NewTMemoryBufferLen(len(arg660))
		defer mbTrans661.Close()
		_, err662 := mbTrans661.WriteString(arg660)
		if err662 != nil {
			Usage()
			return
		}
		factory663 := thrift.NewTJSONProtocolFactory()
		jsProt664 := factory663.GetProtocol(mbTrans661)
		containerStruct0 := talkservice.NewTalkServiceGetRoomsV2Args()
		err665 := containerStruct0.ReadField1(jsProt664)
		if err665 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.RoomIds
		value0 := argvalue0
		fmt.Print(client.GetRoomsV2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "reissueChatTicket":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ReissueChatTicket requires 1 args")
			flag.Usage()
		}
		arg666 := flag.Arg(1)
		mbTrans667 := thrift.NewTMemoryBufferLen(len(arg666))
		defer mbTrans667.Close()
		_, err668 := mbTrans667.WriteString(arg666)
		if err668 != nil {
			Usage()
			return
		}
		factory669 := thrift.NewTJSONProtocolFactory()
		jsProt670 := factory669.GetProtocol(mbTrans667)
		argvalue0 := talkservice.NewReissueChatTicketRequest()
		err671 := argvalue0.Read(jsProt670)
		if err671 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ReissueChatTicket(context.Background(), value0))
		fmt.Print("\n")
		break
	case "sendMessage":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
			flag.Usage()
		}
		tmp0, err672 := (strconv.Atoi(flag.Arg(1)))
		if err672 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg673 := flag.Arg(2)
		mbTrans674 := thrift.NewTMemoryBufferLen(len(arg673))
		defer mbTrans674.Close()
		_, err675 := mbTrans674.WriteString(arg673)
		if err675 != nil {
			Usage()
			return
		}
		factory676 := thrift.NewTJSONProtocolFactory()
		jsProt677 := factory676.GetProtocol(mbTrans674)
		argvalue1 := talkservice.NewMessage()
		err678 := argvalue1.Read(jsProt677)
		if err678 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SendMessage(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "unsendMessage":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
			flag.Usage()
		}
		tmp0, err679 := (strconv.Atoi(flag.Arg(1)))
		if err679 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "acquireGroupCallRoute":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AcquireGroupCallRoute requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := talkservice.Ae(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		arg683 := flag.Arg(4)
		mbTrans684 := thrift.NewTMemoryBufferLen(len(arg683))
		defer mbTrans684.Close()
		_, err685 := mbTrans684.WriteString(arg683)
		if err685 != nil {
			Usage()
			return
		}
		factory686 := thrift.NewTJSONProtocolFactory()
		jsProt687 := factory686.GetProtocol(mbTrans684)
		containerStruct3 := talkservice.NewTalkServiceAcquireGroupCallRouteArgs()
		err688 := containerStruct3.ReadField4(jsProt687)
		if err688 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Capabilities
		value3 := argvalue3
		fmt.Print(client.AcquireGroupCallRoute(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "acceptChatInvitationByTicket":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AcceptChatInvitationByTicket requires 1 args")
			flag.Usage()
		}
		arg689 := flag.Arg(1)
		mbTrans690 := thrift.NewTMemoryBufferLen(len(arg689))
		defer mbTrans690.Close()
		_, err691 := mbTrans690.WriteString(arg689)
		if err691 != nil {
			Usage()
			return
		}
		factory692 := thrift.NewTJSONProtocolFactory()
		jsProt693 := factory692.GetProtocol(mbTrans690)
		argvalue0 := talkservice.NewAcceptChatInvitationByTicketRequest()
		err694 := argvalue0.Read(jsProt693)
		if err694 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AcceptChatInvitationByTicket(context.Background(), value0))
		fmt.Print("\n")
		break
	case "findContactByUserTicket":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindContactByUserTicket requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.FindContactByUserTicket(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getE2EEPublicKey":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetE2EEPublicKey requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err697 := (strconv.Atoi(flag.Arg(2)))
		if err697 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		tmp2, err698 := (strconv.Atoi(flag.Arg(3)))
		if err698 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetE2EEPublicKey(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "registerDeviceWithIdentityCredential":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "RegisterDeviceWithIdentityCredential requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := talkservice.Provider(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.RegisterDeviceWithIdentityCredential(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "reissueGroupTicket":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ReissueGroupTicket requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ReissueGroupTicket(context.Background(), value0))
		fmt.Print("\n")
		break
	case "updateProfileAttributes":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateProfileAttributes requires 2 args")
			flag.Usage()
		}
		tmp0, err704 := (strconv.Atoi(flag.Arg(1)))
		if err704 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg705 := flag.Arg(2)
		mbTrans706 := thrift.NewTMemoryBufferLen(len(arg705))
		defer mbTrans706.Close()
		_, err707 := mbTrans706.WriteString(arg705)
		if err707 != nil {
			Usage()
			return
		}
		factory708 := thrift.NewTJSONProtocolFactory()
		jsProt709 := factory708.GetProtocol(mbTrans706)
		argvalue1 := talkservice.NewUpdateProfileAttributesRequest()
		err710 := argvalue1.Read(jsProt709)
		if err710 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateProfileAttributes(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "verifyQrcode":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "VerifyQrcode requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.VerifyQrcode(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "acceptChatInvitation":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AcceptChatInvitation requires 1 args")
			flag.Usage()
		}
		arg713 := flag.Arg(1)
		mbTrans714 := thrift.NewTMemoryBufferLen(len(arg713))
		defer mbTrans714.Close()
		_, err715 := mbTrans714.WriteString(arg713)
		if err715 != nil {
			Usage()
			return
		}
		factory716 := thrift.NewTJSONProtocolFactory()
		jsProt717 := factory716.GetProtocol(mbTrans714)
		argvalue0 := talkservice.NewAcceptChatInvitationRequest()
		err718 := argvalue0.Read(jsProt717)
		if err718 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AcceptChatInvitation(context.Background(), value0))
		fmt.Print("\n")
		break
	case "decryptFollowEMid":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DecryptFollowEMid requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DecryptFollowEMid(context.Background(), value0))
		fmt.Print("\n")
		break
	case "findContactByUserid":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindContactByUserid requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.FindContactByUserid(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getServerTime":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServerTime(context.Background()))
		fmt.Print("\n")
		break
	case "inviteIntoChat":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "InviteIntoChat requires 1 args")
			flag.Usage()
		}
		arg721 := flag.Arg(1)
		mbTrans722 := thrift.NewTMemoryBufferLen(len(arg721))
		defer mbTrans722.Close()
		_, err723 := mbTrans722.WriteString(arg721)
		if err723 != nil {
			Usage()
			return
		}
		factory724 := thrift.NewTJSONProtocolFactory()
		jsProt725 := factory724.GetProtocol(mbTrans722)
		argvalue0 := talkservice.NewInviteIntoChatRequest()
		err726 := argvalue0.Read(jsProt725)
		if err726 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.InviteIntoChat(context.Background(), value0))
		fmt.Print("\n")
		break
	case "acceptGroupInvitationByTicket":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AcceptGroupInvitationByTicket requires 3 args")
			flag.Usage()
		}
		tmp0, err727 := (strconv.Atoi(flag.Arg(1)))
		if err727 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AcceptGroupInvitationByTicket(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "deleteOtherFromChat":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteOtherFromChat requires 1 args")
			flag.Usage()
		}
		arg730 := flag.Arg(1)
		mbTrans731 := thrift.NewTMemoryBufferLen(len(arg730))
		defer mbTrans731.Close()
		_, err732 := mbTrans731.WriteString(arg730)
		if err732 != nil {
			Usage()
			return
		}
		factory733 := thrift.NewTJSONProtocolFactory()
		jsProt734 := factory733.GetProtocol(mbTrans731)
		argvalue0 := talkservice.NewDeleteOtherFromChatRequest()
		err735 := argvalue0.Read(jsProt734)
		if err735 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteOtherFromChat(context.Background(), value0))
		fmt.Print("\n")
		break
	case "findContactsByPhone":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindContactsByPhone requires 1 args")
			flag.Usage()
		}
		arg736 := flag.Arg(1)
		mbTrans737 := thrift.NewTMemoryBufferLen(len(arg736))
		defer mbTrans737.Close()
		_, err738 := mbTrans737.WriteString(arg736)
		if err738 != nil {
			Usage()
			return
		}
		factory739 := thrift.NewTJSONProtocolFactory()
		jsProt740 := factory739.GetProtocol(mbTrans737)
		containerStruct0 := talkservice.NewTalkServiceFindContactsByPhoneArgs()
		err741 := containerStruct0.ReadField1(jsProt740)
		if err741 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Phones
		value0 := argvalue0
		fmt.Print(client.FindContactsByPhone(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getGroupsV2":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetGroupsV2 requires 1 args")
			flag.Usage()
		}
		arg742 := flag.Arg(1)
		mbTrans743 := thrift.NewTMemoryBufferLen(len(arg742))
		defer mbTrans743.Close()
		_, err744 := mbTrans743.WriteString(arg742)
		if err744 != nil {
			Usage()
			return
		}
		factory745 := thrift.NewTJSONProtocolFactory()
		jsProt746 := factory745.GetProtocol(mbTrans743)
		containerStruct0 := talkservice.NewTalkServiceGetGroupsV2Args()
		err747 := containerStruct0.ReadField1(jsProt746)
		if err747 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.GroupId
		value0 := argvalue0
		fmt.Print(client.GetGroupsV2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetGroup(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getCompactGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCompactGroup requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetCompactGroup(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getGroupWithoutMembers":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetGroupWithoutMembers requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetGroupWithoutMembers(context.Background(), value0))
		fmt.Print("\n")
		break
	case "inviteIntoGroup":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "InviteIntoGroup requires 3 args")
			flag.Usage()
		}
		tmp0, err751 := (strconv.Atoi(flag.Arg(1)))
		if err751 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg753 := flag.Arg(3)
		mbTrans754 := thrift.NewTMemoryBufferLen(len(arg753))
		defer mbTrans754.Close()
		_, err755 := mbTrans754.WriteString(arg753)
		if err755 != nil {
			Usage()
			return
		}
		factory756 := thrift.NewTJSONProtocolFactory()
		jsProt757 := factory756.GetProtocol(mbTrans754)
		containerStruct2 := talkservice.NewTalkServiceInviteIntoGroupArgs()
		err758 := containerStruct2.ReadField3(jsProt757)
		if err758 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ContactIds
		value2 := argvalue2
		fmt.Print(client.InviteIntoGroup(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "acceptGroupInvitation":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AcceptGroupInvitation requires 2 args")
			flag.Usage()
		}
		tmp0, err759 := (strconv.Atoi(flag.Arg(1)))
		if err759 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AcceptGroupInvitation(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "deleteSelfFromChat":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteSelfFromChat requires 1 args")
			flag.Usage()
		}
		arg761 := flag.Arg(1)
		mbTrans762 := thrift.NewTMemoryBufferLen(len(arg761))
		defer mbTrans762.Close()
		_, err763 := mbTrans762.WriteString(arg761)
		if err763 != nil {
			Usage()
			return
		}
		factory764 := thrift.NewTJSONProtocolFactory()
		jsProt765 := factory764.GetProtocol(mbTrans762)
		argvalue0 := talkservice.NewDeleteSelfFromChatRequest()
		err766 := argvalue0.Read(jsProt765)
		if err766 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteSelfFromChat(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getBlockedContactIds":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.SyncReason(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetBlockedContactIds(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getSettingsAttributes2":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSettingsAttributes2 requires 1 args")
			flag.Usage()
		}
		arg767 := flag.Arg(1)
		mbTrans768 := thrift.NewTMemoryBufferLen(len(arg767))
		defer mbTrans768.Close()
		_, err769 := mbTrans768.WriteString(arg767)
		if err769 != nil {
			Usage()
			return
		}
		factory770 := thrift.NewTJSONProtocolFactory()
		jsProt771 := factory770.GetProtocol(mbTrans768)
		containerStruct0 := talkservice.NewTalkServiceGetSettingsAttributes2Args()
		err772 := containerStruct0.ReadField1(jsProt771)
		if err772 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.AttributesToRetrieve
		value0 := argvalue0
		fmt.Print(client.GetSettingsAttributes2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "inviteIntoRoom":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "InviteIntoRoom requires 3 args")
			flag.Usage()
		}
		tmp0, err773 := (strconv.Atoi(flag.Arg(1)))
		if err773 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg775 := flag.Arg(3)
		mbTrans776 := thrift.NewTMemoryBufferLen(len(arg775))
		defer mbTrans776.Close()
		_, err777 := mbTrans776.WriteString(arg775)
		if err777 != nil {
			Usage()
			return
		}
		factory778 := thrift.NewTJSONProtocolFactory()
		jsProt779 := factory778.GetProtocol(mbTrans776)
		containerStruct2 := talkservice.NewTalkServiceInviteIntoRoomArgs()
		err780 := containerStruct2.ReadField3(jsProt779)
		if err780 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ContactIds
		value2 := argvalue2
		fmt.Print(client.InviteIntoRoom(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "rejectChatInvitation":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RejectChatInvitation requires 1 args")
			flag.Usage()
		}
		arg781 := flag.Arg(1)
		mbTrans782 := thrift.NewTMemoryBufferLen(len(arg781))
		defer mbTrans782.Close()
		_, err783 := mbTrans782.WriteString(arg781)
		if err783 != nil {
			Usage()
			return
		}
		factory784 := thrift.NewTJSONProtocolFactory()
		jsProt785 := factory784.GetProtocol(mbTrans782)
		argvalue0 := talkservice.NewRejectChatInvitationRequest()
		err786 := argvalue0.Read(jsProt785)
		if err786 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RejectChatInvitation(context.Background(), value0))
		fmt.Print("\n")
		break
	case "updateChatRoomBGM":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UpdateChatRoomBGM requires 3 args")
			flag.Usage()
		}
		tmp0, err787 := (strconv.Atoi(flag.Arg(1)))
		if err787 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UpdateChatRoomBGM(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "findGroupByTicket":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindGroupByTicket requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.FindGroupByTicket(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getRecentFriendRequests":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRecentFriendRequests requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.SyncReason(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetRecentFriendRequests(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getSettingsAttributes":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSettingsAttributes requires 1 args")
			flag.Usage()
		}
		tmp0, err791 := (strconv.Atoi(flag.Arg(1)))
		if err791 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetSettingsAttributes(context.Background(), value0))
		fmt.Print("\n")
		break
	case "rejectGroupInvitation":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RejectGroupInvitation requires 2 args")
			flag.Usage()
		}
		tmp0, err792 := (strconv.Atoi(flag.Arg(1)))
		if err792 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RejectGroupInvitation(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "updateChat":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateChat requires 1 args")
			flag.Usage()
		}
		arg794 := flag.Arg(1)
		mbTrans795 := thrift.NewTMemoryBufferLen(len(arg794))
		defer mbTrans795.Close()
		_, err796 := mbTrans795.WriteString(arg794)
		if err796 != nil {
			Usage()
			return
		}
		factory797 := thrift.NewTJSONProtocolFactory()
		jsProt798 := factory797.GetProtocol(mbTrans795)
		argvalue0 := talkservice.NewUpdateChatRequest()
		err799 := argvalue0.Read(jsProt798)
		if err799 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateChat(context.Background(), value0))
		fmt.Print("\n")
		break
	case "updateSettingsAttributes2":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UpdateSettingsAttributes2 requires 3 args")
			flag.Usage()
		}
		tmp0, err800 := (strconv.Atoi(flag.Arg(1)))
		if err800 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg801 := flag.Arg(2)
		mbTrans802 := thrift.NewTMemoryBufferLen(len(arg801))
		defer mbTrans802.Close()
		_, err803 := mbTrans802.WriteString(arg801)
		if err803 != nil {
			Usage()
			return
		}
		factory804 := thrift.NewTJSONProtocolFactory()
		jsProt805 := factory804.GetProtocol(mbTrans802)
		containerStruct1 := talkservice.NewTalkServiceUpdateSettingsAttributes2Args()
		err806 := containerStruct1.ReadField2(jsProt805)
		if err806 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.AttributesToUpdate
		value1 := argvalue1
		arg807 := flag.Arg(3)
		mbTrans808 := thrift.NewTMemoryBufferLen(len(arg807))
		defer mbTrans808.Close()
		_, err809 := mbTrans808.WriteString(arg807)
		if err809 != nil {
			Usage()
			return
		}
		factory810 := thrift.NewTJSONProtocolFactory()
		jsProt811 := factory810.GetProtocol(mbTrans808)
		argvalue2 := talkservice.NewSettings()
		err812 := argvalue2.Read(jsProt811)
		if err812 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.UpdateSettingsAttributes2(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "getSettings":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSettings requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.SyncReason(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetSettings(context.Background(), value0))
		fmt.Print("\n")
		break
	case "noop":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Noop requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Noop(context.Background()))
		fmt.Print("\n")
		break
	case "removeAllMessages":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RemoveAllMessages requires 2 args")
			flag.Usage()
		}
		tmp0, err813 := (strconv.Atoi(flag.Arg(1)))
		if err813 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RemoveAllMessages(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "updateContactSetting":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
			flag.Usage()
		}
		tmp0, err815 := (strconv.Atoi(flag.Arg(1)))
		if err815 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := talkservice.Eb(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getGroupCall":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetGroupCall requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetGroupCall(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fetchOps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
			flag.Usage()
		}
		argvalue0, err819 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err819 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err820 := (strconv.Atoi(flag.Arg(2)))
		if err820 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2, err821 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err821 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3, err822 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err822 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "fetchOperations":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FetchOperations requires 2 args")
			flag.Usage()
		}
		argvalue0, err823 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err823 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err824 := (strconv.Atoi(flag.Arg(2)))
		if err824 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.FetchOperations(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "kickoutFromGroup":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "KickoutFromGroup requires 3 args")
			flag.Usage()
		}
		tmp0, err825 := (strconv.Atoi(flag.Arg(1)))
		if err825 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg827 := flag.Arg(3)
		mbTrans828 := thrift.NewTMemoryBufferLen(len(arg827))
		defer mbTrans828.Close()
		_, err829 := mbTrans828.WriteString(arg827)
		if err829 != nil {
			Usage()
			return
		}
		factory830 := thrift.NewTJSONProtocolFactory()
		jsProt831 := factory830.GetProtocol(mbTrans828)
		containerStruct2 := talkservice.NewTalkServiceKickoutFromGroupArgs()
		err832 := containerStruct2.ReadField3(jsProt831)
		if err832 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ContactIds
		value2 := argvalue2
		fmt.Print(client.KickoutFromGroup(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "acquireEncryptedAccessToken":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AcquireEncryptedAccessToken requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := talkservice.Nc(tmp0)
		value0 := argvalue0
		fmt.Print(client.AcquireEncryptedAccessToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "createChatRoomAnnouncement":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "CreateChatRoomAnnouncement requires 4 args")
			flag.Usage()
		}
		tmp0, err833 := (strconv.Atoi(flag.Arg(1)))
		if err833 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := talkservice.Y9(tmp2)
		value2 := argvalue2
		arg835 := flag.Arg(4)
		mbTrans836 := thrift.NewTMemoryBufferLen(len(arg835))
		defer mbTrans836.Close()
		_, err837 := mbTrans836.WriteString(arg835)
		if err837 != nil {
			Usage()
			return
		}
		factory838 := thrift.NewTJSONProtocolFactory()
		jsProt839 := factory838.GetProtocol(mbTrans836)
		argvalue3 := talkservice.NewChatRoomAnnouncementContents()
		err840 := argvalue3.Read(jsProt839)
		if err840 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.CreateChatRoomAnnouncement(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "findAndAddContactByMetaTag":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "FindAndAddContactByMetaTag requires 3 args")
			flag.Usage()
		}
		tmp0, err841 := (strconv.Atoi(flag.Arg(1)))
		if err841 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.FindAndAddContactByMetaTag(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "follow":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Follow requires 1 args")
			flag.Usage()
		}
		arg844 := flag.Arg(1)
		mbTrans845 := thrift.NewTMemoryBufferLen(len(arg844))
		defer mbTrans845.Close()
		_, err846 := mbTrans845.WriteString(arg844)
		if err846 != nil {
			Usage()
			return
		}
		factory847 := thrift.NewTJSONProtocolFactory()
		jsProt848 := factory847.GetProtocol(mbTrans845)
		argvalue0 := talkservice.NewFollowRequest()
		err849 := argvalue0.Read(jsProt848)
		if err849 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Follow(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getContact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetContact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "leaveGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "LeaveGroup requires 2 args")
			flag.Usage()
		}
		tmp0, err851 := (strconv.Atoi(flag.Arg(1)))
		if err851 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.LeaveGroup(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "sendChatChecked":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SendChatChecked requires 4 args")
			flag.Usage()
		}
		tmp0, err853 := (strconv.Atoi(flag.Arg(1)))
		if err853 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err856 := (strconv.Atoi(flag.Arg(4)))
		if err856 != nil {
			Usage()
			return
		}
		argvalue3 := int8(tmp3)
		value3 := argvalue3
		fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "updateIdentifier":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateIdentifier requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg858 := flag.Arg(2)
		mbTrans859 := thrift.NewTMemoryBufferLen(len(arg858))
		defer mbTrans859.Close()
		_, err860 := mbTrans859.WriteString(arg858)
		if err860 != nil {
			Usage()
			return
		}
		factory861 := thrift.NewTJSONProtocolFactory()
		jsProt862 := factory861.GetProtocol(mbTrans859)
		argvalue1 := talkservice.NewIdentityCredentialRequest()
		err863 := argvalue1.Read(jsProt862)
		if err863 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateIdentifier(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
